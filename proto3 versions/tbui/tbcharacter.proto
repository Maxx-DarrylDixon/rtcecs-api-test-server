syntax = "proto3";
package tbui;

message UIVariantSpec {
   int32 id = 1;

   string name = 2;

   string description = 3;
}

message UISpecialsSpec {
   repeated UIVariantSpec variants = 2;
}

message UIMechSpec {
   string name = 1;
}

message UIPilotSpec {
   string name = 1;

   int32 age = 2;

   string origin = 3;
}

message UICharacterSpec {
   string type_name = 1;

   UIMechSpec mech = 2;

   UIPilotSpec pilot = 3;

   repeated UISpecialsSpec specials = 4;

   int32 ui_order = 5;
}

message UICharacterData {
   repeated UICharacterSpec char_specs = 1;

   // When starting UI in editor, want to initialize to the currently selected character and opponent.
   string selected_char = 2;

   string selected_opp = 3;
}

enum WindowResolutionType {
   WINDOW_RESOLUTION_TYPE_ZERO = 0;
   WRT_FULLSCREEN = 1;

   WRT_FULLSCREEN_WINDOWED = 2;

   WRT_WINDOWED = 3;
}

enum GraphicsQualityType {
   // Special level for aggregator qualities (most notably "Overall Quality")
   GQT_CUSTOM = 0;

   GQT_LOW = 1;

   GQT_MEDIUM = 2;

   GQT_HIGH = 3;

   GQT_EPIC = 4;
}

message GraphicsSettings {
   bool vsync = 1;

   GraphicsQualityType overall_quality = 2;

   GraphicsQualityType resolution_quality = 3;

   GraphicsQualityType anti_aliasing_quality = 4;

   GraphicsQualityType shadow_quality = 5;

   GraphicsQualityType post_process_quality = 6;

   GraphicsQualityType texture_quality = 7;

   GraphicsQualityType effects_quality = 8;
}

message Resolution {
   int32 width = 1;

   int32 height = 2;
}

message ResolutionSettings {
   repeated Resolution available_resolutions = 1;

   // Index into available resolutions.
   int32 current_resolution = 2;

   WindowResolutionType type = 3;

}

message GraphicsSpec {
   ResolutionSettings resolution = 1;

   GraphicsSettings graphics = 2;
}

// Encapsulates all persisted local preferences that are account-specific
// (as opposed to machine-specific)
message LocalPlayerPreferences {
   KeyBindingConfig key_bindings = 1;

   int32 skill_estimate = 2;
}

message KeyBinding {
   // Multiple keys can be bound to one action (for now limited to 2).
   repeated string bound_keys = 2;
}

message KeyBindingSet {
   // The id of the binding is its position in the array.
   repeated KeyBinding bindings = 1;
}

message KeyBindingConfig {
   // A set of bindings for every type of input (controller, keyboard)
   repeated KeyBindingSet input_binding = 1;
}

// Settings the UI always loads at startup.
message GlobalSettings {
   string server_url = 1;
   int32 listen_port = 2;
   string build_version = 3;
   bool auto_play = 4;
   int32 inactive_timeout_sec = 5;
}

message NetworkSpec {
   // Bind ports and set up P2P network access automatically.
   bool auto_conf = 1;

   // If not auto-configuring, the local port to bind to.
   int32 local_port = 2;

   // If not auto-configuring, the external port to advertise to other players.
   int32 external_port = 3;
}

// Volume integers range from 0 to volume_max
message SoundSpec {
   int32 music_volume = 1;

   int32 vo_volume = 2;

   int32 fx_volume = 3;

   int32 volume_max = 4;
}

message GameOutcome {
   // Did local player win the game?
   bool winner = 1;

   // Did local player lose the game?
   bool loser = 2;

   // Was the gamea  draw?
   bool draw = 3;

   // How many games has p1 won?
   int32 p1_won = 4;

   // How many games has p2 won?
   int32 p2_won = 5;
}

message DebugSpec {
   // Log GGPO activity
   bool ggpo_log = 1;
}

// Make sure the values are the same as ERoundResult in TBGameState
enum RoundResultType {
   RRT_UNPLAYED = 0;
   RRT_NORMAL = 1;
   RRT_SUPER = 2;
   RRT_CHIP = 3;
   RRT_TIME = 4;
   RRT_DRAW = 5; // Double KO
   RRT_PERFECT = 6;
}

message PlayerRoundHistory {
   repeated RoundResultType history = 1;
}

message RoundHistory {
   repeated PlayerRoundHistory player_history = 1;
}
